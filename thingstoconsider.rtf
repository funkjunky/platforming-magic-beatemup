{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset77 ZapfDingbatsITC;\f2\fnil\fcharset0 LucidaGrande;
\f3\fnil\fcharset0 Menlo-Regular;\f4\fswiss\fcharset0 ArialMT;\f5\fswiss\fcharset0 Helvetica-Bold;
\f6\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red82\green0\blue135;
\red220\green0\blue5;\red75\green0\blue1;\red26\green26\blue26;\red204\green116\blue6;\red15\green15\blue15;
\red174\green174\blue174;\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c40000\c0\c60000;
\cssrgb\c90000\c0\c0;\cspthree\c33912\c4843\c2525;\cssrgb\c13333\c13333\c13333;\cspthree\c79891\c54372\c18683;\cspthree\c7060\c7058\c7060;
\cspthree\c73731\c73721\c73733;\cssrgb\c0\c0\c93333;}
\margl1440\margr1440\vieww11980\viewh9720\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 TODO\
\
\pard\pardeftab720\sl520\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\uc0\u10032  
\f2 Latest
\f1  
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 Accomplishments 
\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\uc0\u10032 \
	\uc0\u10032  
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 feat/gametime [also updated effect-tick]
\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
	\uc0\u10032 
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0  feat/first-fireball [generators added!]
\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
	\uc0\u10032 
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0  feat/first-audio\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
~~~~ HOW DO I DO GROUNDING SO AI CAN JUMP?!?!? ~~~~\
\
\'97 feat/enemies-attacks-health\
\
 *- create a new entity for enemies.\
 *- use generator to spawn just one enemy to start\
 *- stop doppleganger from falling off the level\
\
 *- Using a spawnEnemies generator, spawn 1 enemy every tens seconds until there are 10 enemies. [spawn randomly from 4 different locations, left right platform and left right ground]\
	*- create 4 locations, iterate over them\
 - enemies move randomly left and right for random periods of time. Using generator actions\
	*- pushingLeftForX, pushingRightForX\
	*- using entity update member to randomly choose these if not moving.\
	*- create a props jump vy action, and use that to see the explicit jump vy update\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 	*- randomly jump\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
	*- abstract around the doppleganger ai from the updateProps of the entity\
	*- get jumping working again, lololollol\
	*- do the same for all entities. [update calls other functions]\
\
	*- randomly shoot fireballs\
\
\
\
 - turn blocks into real entities\
	*- give them their own typeDefinition\
	*- create the entities when the game starts\
	*- still hard code blocks collision, but getting from store\
	*- ensure everything still works\
	*- do graphics from entities\
	*- delete old level.js and ensure things still work\
\
 - abstract collision detection [ONLY GET blocks working, and console logs for other collisions]\
	*- each entity has collidesWith object, which defined what to do when collided with entity.\
	- cleanupAction:\
		*;- clears all collidedWith properties\
		*- collidesWith: \{ block: \{ how: () => (\{\}), onCollision: (\{\}) => \{\} \} \}\
		*- for each key, call how, if truthy, push value onto entity.collidedWith \{ <id>: result \}\
		*- for each collidedWith call onCollision(entity, otherEntity, result, dispatch)\
\
	*- write the how and onCollision for player\
	*- clean up the gameUpdate\'85. I don\'92t like the three loops, but i need to grab the latest entity each time\
	*-!!- falling isn\'92t working\
	*- have doppleganger copy player\'85 like import it\
\
 - add collision and handling for fireballs and players\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0  	*- player => take damage\
	*- fireball => delete self, \
	*- 
\f3\fs22 \cf5 \cb6 \CocoaLigature0 noCollisionWithDuration, and noColllisionWithUntil\
	*- implement no collision With
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
 	*- add clause so you cant run into your own fireball or explosion\
	*- show healthbar at top left as big rectangle [add divisions for every 4hp]\
	*- add the divisions per 1hp\
	[*-] test dopplegangers can get hit by player fireballs and players can get hit by doppleganger fireballs\
\
 - add sword swinging, including collision and dmg\
	*- move fireball to y button\
	*- dispatch action to attack, probably a generator\
	*- action to attack should change attacking state [windingup, swinging [immediately do dmg], recovery, ready]\
	*- wire up animation frames\
\
 ~~ update redux yield effect ~~\
 \
 *- remove lodash, and auto fix audit, an any other obvious cleanup, tests must pass\
 - add kill switch to library ~ dispatch action \{ type: \'92setGeneratorToDone\'92, id: <id returned by dispatching generator> \}\
\
	*- add actionCreator `setGeneratorToDone()` (generates the id) \{ type, id \}\
	*- when a generator is dispatched, return setGeneratorToDone() and pass the value on return, instead of the promise.\
	*- in the middleware, IF setGeenratorToDone, then delete id from `runningGenerators`\
	*- before calling next, check runningGenerators, if not available, then return generator.return, to end the generator. [no arg, so as if calling next, but won\'92t run generator, will just return prev result]\
\
	*- separate yieldEffectMiddleware into it\'92s own function\
		*- also abstract out the ryeGenerators through currying\
	*- separate effelctGeneratorProcessor into it\'92s own function\
	*- write tests to cover all of this\
		*- unit test yieldEffectMiddleware that is returned\
			*- returns action if no rye meta \
			*- delete ryeGenerator, as a side effect if action was sent\
			*- mock effectGeneratorProcessor and ensure sideeffect of adding it to ryeGenerators and that it returns the action [returned by my mock of effectGenProcessor]\
 *- DONE Rye Middleware!\
\
 *- update README and package.json, giving FULL credit to original author\
 *- publish under a new name \'93Rye\'94 or \'93redux-rye\'94 [1.0.0]\
 *- use new library in game.\
 *- `npm audit fix \'97force`, ensure tests pass, release new minor version\
\
~~~~~~~~~~~~~~~~~~~~~~~~\
\
Kill switch on generators:	[cancel jump, conjure, seekFireball, etc.]\
 *- When dispatched, return function to kill the generator, or an id?\
 *- next time the generator is looped, before calling next we check if we should stop\
\
*- check diff and see where I\'92m at\'85 Try and get things compiling again.\
\
	- change actionFilters to allowedToDispatch.\
		*- create basic list of if satements, that return, to not allow the action\
		*- copy -vel logic to jump generator\
		*- add quick fall logic to generator [if stop jumping less than 1 second, then set vy to 0]\
		*- add jump shortly after falling. (use 500ms at first to test, then use 100ms once working)\
		- use redux thunks, instead of generators, because of new return of generators\
			- replace all the generators for tick with thunks\
			- get things compiled\
\
		- replace jump action with jump generator\
		- replace dash action with dash generator\
\
		- have i added redux thunks? If not, figure it out!! [I have full control!]\
\
		- Get everything works\
\
		- add cancelling of fireball, if jump or dash and ensure it works.\
(if not, add more points to get it working)\
\
	- add, that if either recovering from a spell or an attack, then cant attack or cast\
	- play a sound on collision of fireball\
	- add collision\
		~ in collision player<>doppleganger\
		- if player state is swinging, then check a box in front of the player and mark with \'93attack\'94\
		- deal dmg to dopple ganger\
		- add sound effect for collision\
	- add the opposite collision for dopple ganger and let them attack.\
\
 - spawn a new dopple ganger every 5 seconds or so\'85\
\
~~ meditate on game and think of how to make it punch! Be awesome!\
 
\f4\fs32 \cf7 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 \uc0\u9829  
\f0\fs28 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 manueverability?\
\pard\pardeftab720\partightenfactor0

\f4\fs32 \cf7 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7  \uc0\u9829  high risk, high reward with casting spells [big impact spells???]\
 \uc0\u9829  different attacks collision boxes\
 \uc0\u9829  charging up spells and attacks, for control over damage or range, or area, or for increased effects, like stunning??
\f0\fs28 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
 - Do I have a game yet? What would make this a fun game? stats? better controls? More obvious health or impacts??\
\
 - Clean up entities/index before final push\
\
\'97 \'97\
\
Question: Cancel generator??? What\'92d be a nice way to achieve this??\
	ie. cancel jump, because state is falling\
	ie. cancel conjurefireball, because state is moving\
	ie. cancel seekfireball, because collided with a target\
\
\'97 fix/jumping-falling-bugs\
\
 - DRYifiy the entityDefinition function calls\
	> 
\f3\fs22 \cf8 \cb9 \CocoaLigature0 definition\cf10 (entity).\cf8 updateState\cf10 (\cf8 getState\cf10 (), dispatch);
\f0\fs28 \cf0 \cb1 \CocoaLigature1 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0  - fix falling through floor bug\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0  - infinite jump bug\
 - pulsing of explosion stopped. Get it to pulse on damage?? perhaps using a state?\
\
\'97 feat/better-development\
\
 - middleware for collecting debugging information\
	- store all actions, including generators and functions (store their reflected name and arguments, also mark them as what they are) [Into it\'92s OWN Redux store]\
\
 - Create a dropdown to choose right debuggers on the top right. (currently just \'93print action\'94)\
\
 - create printActions function that takes the debug store, and return the react component.	- create the function and have it return a connected react component\
	- This react component should have a text input to filter the actions. \
	- show all actions\
	- show actions based on the filter. [filter on keys and values]\
\
 - in index, onChange of the dropdown, unrender the old component, then render the new one.\
\
 - On the bottom add a connected plot graph of the number of active entities [polled every 100th of a second]\
	- create the function that takes the game store and return a connected component\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0  - HMR for generators\
\
 - maybe don\'92t use folders for single files, because devtools sucks and only shows index?\
\
\'97 \'97\
\
\'97 feat/audio-polish\
 - add in music, ensure it isn\'92t too loud. Err on the side of quiet\
 - ensure we have basic sound effects for various things\
	- slashing enemy\
	- fireball\
	- explosion\
	- landing [very light]\
	- getting hit by enemy\
	- more??\
\
  \'97 feat/game-polish\
 - if an entity moves while casting a fireball, it will be cancelled\
 - enemies will stop moving to cast fireballs.\
 - Add points to the top right. With a little pop animation when a new kill is gained\
 - actually enforce \'93ready\'94 for casting. ie. filter fireball only if conjure[ready] [both player and enemies]\
 - add quick stun when hit for player (and therefor also doppleganger)\
\'97 \'97\
\
 - address TODOs\
\
 - Get trello setup to story proper work!! maybe create epics for feature branch names?\
	- first story: publish and advertise with friends!\
\
 - how to structure trello lanes??\
\
 - Add All stories below!\
\
 - story for: If I batch extremely common actions, like updateProps and pushCollidedWith, perhaps I get a significant performance jump. Also perhaps cap update speed, to save battery. Like maybe 50ms [if i havent already, add an FPS and UPS graphic]\
\
 - story for: add mana [lower priority]\
	- including making it clear that a fireball is ready, when enough mana has recovered\
	- add a charge button, perhaps on left bumper that crouches the player, but charges mana three times as fast. [maybe make another story, that this ability could be interchanged with other recover abilities, like stealing mana, or one that uses mana to move faster, while also giving higher default mana regen.]\
\
 - story for: createStateSlice([\'91dashing\'92, \'91notdashing\'92], [createdAt, lastState]), where lastState and createdAt are higher order function, that applies _state as a property. [NOTE: this will make \'91createState\'92 obsolete in a way\'85 instead \'91createdAt\'92 will handle it.]\
\
 - story for: grouping similar enemy code. Ie doppleganger is mostly a copy of player, they should share a common code base.\
\
 - story for: evaluate whether the audio element is the appropriate container\'85 maybe use a stream, or oscillator\
\
 - story for: how to show health? hearts? circles? Something to show clear deliniation\
\
 - story for: handling variable joystick input (how to not spam actions?? Perhaps START pushingRight, but call a different filtered out action to update the intensity in state)\
\
 - Story for Logger: have type showing, and expand to see payload and diff\
	- group every 20 in collapsable collections, header is the timestamp for the actions [beginning to end]\
	- make sure logger useful and add anything that may help [maybe controls to expand action and diff, maybe only show type. Add filters?]\
\
 - story to: remove difference between a hard refresh and an HMR\'85 everything should go through HMR if possible\
\
 - story for: adding entity type graphics and audio in separate files. [graphics.js and audio.js in respective folders], pull them out of general graphics and audio files\
\
 - story for further movement improvements: jumpReady state, so we can jump earlier than grounding and jump shortly after starting falling?\
\
 - Story for: ALL of the surface level code, should be CRAZY SIMPLE. All state definition and nothing more. All business logic complexity should be abstracted away. [ie. soundUpdate, should just be `if state, then soundShouldBePlaying` Use another function to only register the sound if not registered]\
\
- Story for rewinding:\
	- first one for record props on states state changes, You can only rewind to points of state changes.\
	- second, change updateProps to work off of Date.now, instead of dt. All values calculated by when the state started, versus Date.now(). This allows a state to be reverted, as if it never happened, super cool, and will be hyper helpful when i take this online!\
	~ actually, this is more complicated. jump updates vy, but vy updates y, how do i control vy updating y? Also what if multiple things are changing vy or y? I still think this is possible, but it will require some interesting engineering.\
\
 - Story for: use high performance timer, and have controls and update return a callback for interval, and set the \'93intervals\'94 in index instead using the high performance timer.\
\
 - Story for: put timestamp in redux [using middleware], so i have a reference for each state.\
\
 - Epic for: don\'92t forget juice! [can you do epics in Trello? Anyways this is a huge undertaking! Perhaps a weekend sprint? I\'92m going to want lots of animations, and lots of punchy sound effects\'85 maybe tweak the sounds myself? :o MAYBE THROUGH SOUND API???? :O :O :O]\
\
\'97 end of adding stories\
\
 - Look through this README\
	- get story ideas\
	- add to technologies.md, and perhaps write different notes to record progress and things learned.\
	- clean this TODO up, including removing archive. \
\
~~ Things To Consider ~~:\
\
 - arbitrary graphics animations, like running\
 	- draw of running will use a singleton 
\f5\b member of the entity 
\f0\b0 for the frame state.\
	- that singleton will have it\'92s state reset on idle\
	- I should do all arbitrary graphic states using singletons.\
	- 
\f5\b member of the entity
\f0\b0  will have their own set of singletons \'93graphicsSingletons\'94\
\
	entity.draw,\
	entity.graphics.run.draw,\
	entity.graphics.run.reset,\
	entity.graphics.run.frame,\
	entity.graphics.run.sprite\
\
 - State machine per entity\
	- hierarhical input based on state\
	- hierarchical update based on state\
	? class per state?\
	? action can set new state for entity ?\
	- pushdown automata for going back to original state. ie firing while jumping back to jumping?\
\
\
\
\
\
\
\
\
\
\
\
*************\
ARCHIVE *\
*************\
\
*** SOOO many ways to do this. I should list them and make a blog.\
\
Actions consist of: createEntity, updateProps, and then all of the state change actions.\
 - This way, everything interesting in the game can be trades to the state changes.\
OR\
 keep the props separate, createEntity, creates props and entity object, update works separately, then state can work naturally.\
\
	?? another idea, ugh, each type has it\'92s own reducer, dumb idea\
\{ wizardKnights: \{ \'91wizardknight1\'92:  \{ movement \} \} \}\
\
Conclusion:\
	1. update defined in statemachine, used in reducers\
		- reducer = stateMachines.forEach(sm => entites[id].state[sm].updateReducer(sm.currentState, dt));\
\
	2. use the updates in the reducers\
\
	3. call an observable to clean up the state, after every reducer iteration???\
		- flush actions, then run the observable clean up thunk action.\
		- flush again, for a clean slate.\
\
\
	state machines have properties and valid state machines.\
\
 - Write out complete flow diagram of CONTROLS, STATE MACHINES, GENERATORS\
	(I think those three things are all we need for a game)\
		\'93 | \'93	means \'93filtered by\'94\
		\'93 [ ] \'93	means \'93idem potent on\'94\
		\'93 => \'93means \'93interfaces with\'94 (so update state machine or start generator)\
	controls | state machines => state machines\
	controls | state machines => generators [state machines]\
	generators [state machines] => state machines\
	state machine update [state machines] => state machines\
\
	Idea: \'93update\'94 can\'92t change state, it can only update properties.\
	Example: falling, updates positions, how do we switch state?		[only apply falling if state is falling\'85 side-effect-free gravity.]\
		[jumping, doesn\'92t apply gravity, it just moves up]\
\
	How do we move left and right: state.horizontalMovement = \'93right\'94\
		- turn on and off based on events \'93on(left, dispatch(moveLeft)\
		- with joystick: \'93on(joystickLeft, intensiity => if(canMove()) dispatch(moveleft(intensity))\
			- this would trigger often, but thats fine, its a simple state change\
\
\
 - HOW add in distinction between entity properties, and state.\
	- update only changes properties??\
	- generators and controls only update state??\
 - HOW Landing??? collision detection check in the general update. sends a touching action to entities. To do with as they please.\
	- HOW to not spam, while on the ground? If entities are already \'93touching\'94 don\'92t send an event. If they become notTouching, send an nolongertouching event.\
	- update passes level information to player, who uses it to do their movement update.\
		- with this it can slow the player down on an incline,or cause some players to slide, etc.\
\
- fix devtools warnings. Likely broken extensions [Chrome Bug]\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://bugs.chromium.org/p/chromium/issues/detail?id=974543"}}{\fldrslt 
\f6\fs24 \cf11 \expnd0\expndtw0\kerning0
\ul \ulc11 https://bugs.chromium.org/p/chromium/issues/detail?id=974543}}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
/**** old ideas ****/\
\
Sound:\
 - add sound loop, gets called every 100ms exactly. polled more often, so we accurately hit it at the exact correct time.\
 - sound mapping from state to sound asset\
 - in sound loop, play sound mapping for exactly the minimum of 100ms or end of clip\
 - store nextSoundLoop Date.now in redux\
 - startSoundClip, will immediately play the sound clip for duration until the nextSoundLoop}