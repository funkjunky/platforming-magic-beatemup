{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset77 ZapfDingbatsITC;\f2\fnil\fcharset0 LucidaGrande;
\f3\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red82\green0\blue135;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c40000\c0\c60000;
}
\margl1440\margr1440\vieww11980\viewh9720\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs28 \cf0 TODO\
\
\pard\pardeftab720\sl520\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 \uc0\u10032  
\f2 Latest
\f1  
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 Accomplishments 
\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\uc0\u10032 \
\pard\pardeftab720\sl520\partightenfactor0

\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 	
\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\uc0\u10032  
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 feat/xbox1-mapping
\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
	\uc0\u10032 
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0  feat/dash-stop-animations
\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
	\uc0\u10032 
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0  feat/dashing\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
\
\'97 feat/first-audio (BIG rework)\
 *- get a sound working on dash [anywhere, just hearing something]\
\
 *- create getSoundState with audio inside register\
 *- add the loop function into bootstrap\
 *- get it working!\
 *- use now and state to start the sound at the correct time.\
\
 *- things working again\'85\
 *- Cleaning up load resources, bootstrap, and everything there\'85\
 *- only index should reference window, pass everything else\
 *- try and make audioContext only be in soundState, but loadResources\
 *- continue to tidy up\
\
 - cant spam sound\'85 get that working again\
\
 - get pause pausing the sound, and restarting it\
\
 - add pause graphic. [semi-transparent covering screen, last thing drawn, pause in big font]\
 - bring together all updates into one interval\
\
 - Add pause, and ensure that the sound continues just fine after unpause [have to hold dash :p]\
	~ note: I think I can pause controls as well. If the player continues to hold dash, after unpause, they should continue to dash.\
\
 - move dashSound into loadResources.\
 - move the sound playing outside of getSoundState\
 - ???? more clean up?\
\
 ~ Function: Given a state start and stop sounds, if not already started or stopped.\
	~ separate sound state, of what is actually playing and their resources\
	~ Function checks sound-state, based on real state, and starts a missing sound at the correct point, or stops a no longer existing sound, or alters a sound as necessary\
\
 - get it working with the sound update loop\
\
 - make sound effect quiter, so it isn\'92t too annoying.\
\
 - get music working [turn off after getting it to work]\
\'97 \'97\
\
\
- fix devtools warnings. Likely broken extensions\
\
\
\'97 feat/first-fireball\
 \
- Add fireball to button, that casts, then shoots out, then pulses, then disappears\
	(just like my old demo, but in this case it will seek to location, NOT another entity)\
\
\'97 \'97\
\
\'97 feat/filter-state-changes\
 - add a middleware or something that filters state changes.\
	+ state actions only trigger when the state ACTUALLY changes\
	+ any state can be ATTEMPTED to be changed, so no compounded logic.\
	+ all state change reducers are painfully simple\
	~ think of it sorta like a flywheel or clutch ~\
	So the controls and state reducers stay simple\
ie. a = jump => [action filter: call jump ONLY IF grounded] => jump action switches jump state\
	dispatch(attempt(jump(entity[\'91player1\'92])));\
		- attempt adds meta tag to action, middleware calls tyepDefinition.reducerFilters\
		 \{ reducerFilters: combineReducerFilters(\{ jump, movement \}) \}\
\'97 \'97\
\
 - address TODOs\
\
 - Get trello setup to story proper work!! maybe create epics for feature branch names?\
\
 - story for: evaluate whether the audio element is the appropriate container\'85 maybe use a stream, or oscillator\
\
 - story for: handling variable joystick input (how to not spam actions?? Perhaps START pushingRight, but call a different filtered out action to update the intensity in state)\
\
 - Story for Logger: have type showing, and expand to see payload and diff\
	- group every 20 in collapsable collections, header is the timestamp for the actions [beginning to end]\
	- make sure logger useful and add anything that may help [maybe controls to expand action and diff, maybe only show type. Add filters?]\
\
 - story to: remove difference between a hard refresh and an HMR\'85 everything should go through HMR if possible\
\
 - story for: adding entity type graphics and audio in separate files. [graphics.js and audio.js in respective folders], pull them out of general graphics and audio files\
\
 - use high performance timer, and have controls and update return a callback for interval, and set the \'93intervals\'94 in index instead using the high performance timer.\
\
 - story for further movement improvements: jumpReady state, so we can jump earlier than grounding and jump shortly after starting falling?\
\
 - Story for: ALL of the surface level code, should be CRAZY SIMPLE. All state definition and nothing more. All business logic complexity should be abstracted away. [ie. soundUpdate, should just be `if state, then soundShouldBePlaying` Use another function to only register the sound if not registered]\
\
- Story for rewinding:\
	- first one for record props on states state changes, You can only rewind to points of state changes.\
	- second, change updateProps to work off of Date.now, instead of dt. All values calculated by when the state started, versus Date.now(). This allows a state to be reverted, as if it never happened, super cool, and will be hyper helpful when i take this online!\
	~ actually, this is more complicated. jump updates vy, but vy updates y, how do i control vy updating y? Also what if multiple things are changing vy or y? I still think this is possible, but it will require some interesting engineering.\
\
 - put timestamp in redux [using middleware], so i have a reference for each state.\
\
~~ Things To Consider ~~:\
\
 - arbitrary graphics animations, like running\
 	- draw of running will use a singleton 
\f3\b member of the entity 
\f0\b0 for the frame state.\
	- that singleton will have it\'92s state reset on idle\
	- I should do all arbitrary graphic states using singletons.\
	- 
\f3\b member of the entity
\f0\b0  will have their own set of singletons \'93graphicsSingletons\'94\
\
	entity.draw,\
	entity.graphics.run.draw,\
	entity.graphics.run.reset,\
	entity.graphics.run.frame,\
	entity.graphics.run.sprite\
\
 - State machine per entity\
	- hierarhical input based on state\
	- hierarchical update based on state\
	? class per state?\
	? action can set new state for entity ?\
	- pushdown automata for going back to original state. ie firing while jumping back to jumping?\
\
\
\
\
\
\
\
\
\
\
\
*************\
ARCHIVE *\
*************\
\
*** SOOO many ways to do this. I should list them and make a blog.\
\
Actions consist of: createEntity, updateProps, and then all of the state change actions.\
 - This way, everything interesting in the game can be trades to the state changes.\
OR\
 keep the props separate, createEntity, creates props and entity object, update works separately, then state can work naturally.\
\
	?? another idea, ugh, each type has it\'92s own reducer, dumb idea\
\{ wizardKnights: \{ \'91wizardknight1\'92:  \{ movement \} \} \}\
\
Conclusion:\
	1. update defined in statemachine, used in reducers\
		- reducer = stateMachines.forEach(sm => entites[id].state[sm].updateReducer(sm.currentState, dt));\
\
	2. use the updates in the reducers\
\
	3. call an observable to clean up the state, after every reducer iteration???\
		- flush actions, then run the observable clean up thunk action.\
		- flush again, for a clean slate.\
\
\
	state machines have properties and valid state machines.\
\
 - Write out complete flow diagram of CONTROLS, STATE MACHINES, GENERATORS\
	(I think those three things are all we need for a game)\
		\'93 | \'93	means \'93filtered by\'94\
		\'93 [ ] \'93	means \'93idem potent on\'94\
		\'93 => \'93means \'93interfaces with\'94 (so update state machine or start generator)\
	controls | state machines => state machines\
	controls | state machines => generators [state machines]\
	generators [state machines] => state machines\
	state machine update [state machines] => state machines\
\
	Idea: \'93update\'94 can\'92t change state, it can only update properties.\
	Example: falling, updates positions, how do we switch state?		[only apply falling if state is falling\'85 side-effect-free gravity.]\
		[jumping, doesn\'92t apply gravity, it just moves up]\
\
	How do we move left and right: state.horizontalMovement = \'93right\'94\
		- turn on and off based on events \'93on(left, dispatch(moveLeft)\
		- with joystick: \'93on(joystickLeft, intensiity => if(canMove()) dispatch(moveleft(intensity))\
			- this would trigger often, but thats fine, its a simple state change\
\
\
 - HOW add in distinction between entity properties, and state.\
	- update only changes properties??\
	- generators and controls only update state??\
 - HOW Landing??? collision detection check in the general update. sends a touching action to entities. To do with as they please.\
	- HOW to not spam, while on the ground? If entities are already \'93touching\'94 don\'92t send an event. If they become notTouching, send an nolongertouching event.\
	- update passes level information to player, who uses it to do their movement update.\
		- with this it can slow the player down on an incline,or cause some players to slide, etc.\
\
\
\
/**** old ideas ****/\
\
Sound:\
 - add sound loop, gets called every 100ms exactly. polled more often, so we accurately hit it at the exact correct time.\
 - sound mapping from state to sound asset\
 - in sound loop, play sound mapping for exactly the minimum of 100ms or end of clip\
 - store nextSoundLoop Date.now in redux\
 - startSoundClip, will immediately play the sound clip for duration until the nextSoundLoop}